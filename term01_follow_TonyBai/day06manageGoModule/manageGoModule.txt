
# 一、新增依赖
如果我们要为day05项目增加一个新依赖：github.com/google/uuid

1、在main.go中引入uuid这个包
```
import (
	"github.com/sirupsen/logrus"
	"github.com/google/uuid"
)
```

使用这个包
```
func main() {
    logrus.Println("hello, gopath mode")
		logrus.Println(uuid.NewString())
}
```

此时直接使用 > go run main.go（或者go build）会报错，因为没有安装这个包
main.go:5:2: no required module provides package github.com/google/uuid; to add it:
        go get github.com/google/uuid

2、安装依赖
2.1 可以手动执行 go get 命令。
  > go get github.com/google/uuid
  (下载go package github.com/google/uuid到本地,并且会自动更新go.mod文件)

2.2 直接执行 go mod tidy
对于这个例子而言，手工执行 go get 新增依赖项，和执行 go mod tidy 自动分析和下载依赖项的最终效果是等价的。
但对于复杂的项目变更而言，逐一手工添加依赖项显然很没有效率，go mod tidy 是更佳的选择。

# 二、升级 / 降级依赖的版本
在实际开发工作中，如果我们认为 Go 命令自动帮我们确定的某个依赖的版本存在一些问题，
比如，引入了不必要复杂性导致可靠性下降、性能回退等等，我们可以手工将它降级为之前发布的某个兼容版本。

这个操作依赖 “语义导入版本” 机制

Go Module 的版本号采用了语义版本规范，也就是版本号使用 vX.Y.Z 的格式。其中 X 是主版本号，Y 为次版本号 (minor)，Z 为补丁版本号 (patch)。主版本号相同的两个版本，较新的版本是兼容旧版本的。如果主版本号不同，那么两个版本是不兼容的。

以上面提到过的 logrus 为例，logrus 现在就存在着多个发布版本，我们可以通过下面命令来进行查询：
go list -m -versions github.com/sirupsen/logrus

github.com/sirupsen/logrus v0.1.0 v0.1.1 v0.2.0 v0.3.0 v0.4.0 v0.4.1 v0.5.0 v0.5.1 v0.6.0 v0.6.1 v0.6.2 v0.6.3 v0.6.4 v0.6.5 v0.6.6 v0.7.0 v0.7.1 v0.7.2 v0.7.3 v0.8.0 v0.8.1 v0.8.2 v0.8.3 v0.8.4 v0.8.5 v0.8.6 v0.8.7 v0.9.0 v0.10.0 v0.11.0 v0.11.1 v0.11.2 v0.11.3 v0.11.4 v0.11.5 v1.0.0 v1.0.1 v1.0.3 v1.0.4 v1.0.5 v1.0.6 v1.1.0 v1.1.1 v1.2.0 v1.3.0 v1.4.0 v1.4.1 v1.4.2 v1.5.0 v1.6.0 v1.7.0 v1.7.1 v1.8.0 v1.8.1 v1.8.2 v1.8.3 v1.9.0 v1.9.1 v1.9.2

基于初始状态执行的 go mod tidy 命令，帮我们选择了 logrus 的最新发布版本 v1.9.2。如果你觉得这个版本存在某些问题，想将 logrus 版本降至某个之前发布的兼容版本，比如 v1.7.0，那么我们可以在项目的 module 根目录下，执行带有版本号的 go get 命令：

1、使用 go get packageName@version的方式
例如:
> go get github.com/sirupsen/logrus@v1.7.0
go: downloading github.com/sirupsen/logrus v1.7.0
go: downloading github.com/stretchr/testify v1.2.2
go: downgraded github.com/sirupsen/logrus v1.9.2 => v1.7.0

2、使用令 go mod tidy 来帮助我们降级，但前提是首先要用 go mod edit 命令，明确告知我们要依赖 v1.7.0 版本(而不是 v1.9.2)，
执行步骤是这样的：
> go mod edit -require=github.com/sirupsen/logrus@v1.9.0
> go mod tidy
go: downloading github.com/sirupsen/logrus v1.9.0


在上面的例子中，Go Module 的依赖的主版本号都是 1。
根据我们上节课中学习的语义导入版本的规范，在 Go Module 构建模式下，当依赖的主版本号为 0 或 1 的时候，我们在 Go 源码中导入依赖包，不需要在包的导入路径上增加版本号，
也就是：
import github.com/user/repo/v0 等价于 import github.com/user/repo
import github.com/user/repo/v1 等价于 import github.com/user/repo

但是，如果我们要依赖的 module 的主版本号大于 1，那么我们在 Go 源码中导入依赖包的时候，就必须在包的导入路径上增加版本号。


# 三、添加一个主版本号大于 1 的依赖
语义导入版本机制有一个原则：如果新旧版本的包使用相同的导入路径，那么新包与旧包是兼容的。也就是说，如果新旧两个包不兼容，那么我们就应该采用不同的导入路径。

按照语义版本规范，如果我们要为项目引入主版本号大于 1 的依赖，比如 v2.0.0，那么由于这个版本与 v1、v0 开头的包版本都不兼容，我们在导入 v2.0.0 包时，不能再直接使用 github.com/user/repo，而要使用像下面代码中那样不同的包导入路径：
import github.com/user/repo/v2/xxx

即，如果我们要为 Go 项目添加主版本号大于 1 的依赖，我们就需要使用“语义导入版本”机制，在声明它的导入路径的基础上，加上版本号信息。
例如：为项目添加 github.com/go-redis/redis 依赖包的 v7 版本。

首先，在源码中，以空导入的方式导入 v7 版本的 github.com/go-redis/redis 包：
import (
	_ "github.com/go-redis/redis/v7" // "_"为空导入
	"github.com/sirupsen/logrus"
	"github.com/google/uuid"
)

通过 go get 获取 redis 的 v7 版本：
>go get github.com/go-redis/redis/v7
go: downloading github.com/go-redis/redis/v7 v7.4.1
go: added github.com/go-redis/redis/v7 v7.4.1

go get 自动选择了 go-redis v7 版本下当前的最新版本 v7.4.1
(go.mod 和 go.sum 文件也会被更新)

# 四、升级依赖版本到一个不兼容版本
有些时候，出于要使用依赖包最新功能特性等原因，我们可能需要将某个依赖的版本升级为其不兼容版本，也就是主版本号不同的版本

以 go-redis/redis 这个依赖为例，将这个依赖从 v7 版本升级到 v9 版本
按照语义导入版本的原则，不同主版本的包的导入路径是不同的。所以，同样地，我们这里也需要先将代码中 redis 包导入路径中的版本号改为 v9：

import (
	_ "github.com/go-redis/redis/v9" // "_"为空导入
	"github.com/sirupsen/logrus"
	"github.com/google/uuid"
)

再通过 go get 来获取 v9 版本的依赖包：
>go get github.com/go-redis/redis/v9
go: downloading github.com/go-redis/redis/v9 v9.0.5
go: github.com/go-redis/redis/v9@v9.0.5: parsing go.mod:
        module declares its path as: github.com/redis/go-redis/v9
                but was required as: github.com/go-redis/redis/v9

这样，就完成了向一个不兼容依赖版本的升级。

(注意：此时go.mod 和 go.sum 文件没有更新)

